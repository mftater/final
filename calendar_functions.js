// Function to build the date picker form
function buildDateForm() {
  var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

  $('#datePicker').append('<select id="month"></select>');

  for (var i = 0; i < months.length; i++) {
      $('#month').append('<option value="' + i + '">' + months[i] + '</option>');
  }

  $('#datePicker').append('<select id="year"></select>');

  for (i = 1990; i < 2029; i++) {
      $('#year').append('<option value="' + i + '">' + i + '</option>');
  }

  $('#datePicker').append('<button id="submit">Go!</button>');

  // Set the default date to the current month and year
  var d = new Date();
  var n = d.getMonth();
  var y = d.getFullYear();
  $('#month option:eq(' + n + ')').prop('selected', true);
  $('#year option[value="' + y + '"]').prop('selected', true);
}

// Function to generate the calendar view
function calendar(date) {
  $("#myCal").empty();

  if (date == null) {
      date = new Date;
  }

  day = date.getDate();
  month = date.getMonth();
  year = date.getFullYear();

  months = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
  this_month = new Date(year, month, 1);
  next_month = new Date(year, month + 1, 1);

  days = new Array('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
  first_week_day = this_month.getDay(); // day of the week of the first day
  days_in_this_month = Math.round((next_month.getTime() - this_month.getTime()) / (1000 * 60 * 60 * 24));

  $('#myCal').append('<table id="myCalendar"></table>');
  $('#myCalendar').append('<thead><tr></tr></thead>');

  for (var i = 0; i < days.length; i++) {
      $('#myCalendar thead tr').append('<th>' + days[i] + '</th>');
  }

  $('#myCalendar').append('<tbody></tbody>');
  $('tbody').append('<tr>');

  for (week_day = 0; week_day < first_week_day; week_day++) {
      $('tbody tr').append('<td id="' + week_day + '"></td>');
  }

  week_day = first_week_day;

  for (day_counter = 1; day_counter <= days_in_this_month; day_counter++) {
      week_day %= 7;

      if (week_day == 0) {
          // go to the next line of the calendar
          $('tbody').append('</tr><tr>');
      }

      $('tbody tr:last').append(`<td id="day${day_counter}" class="calendar-day" data-day="${day_counter}">${day_counter}<div class="events"></div></td>`);

      week_day++;
  }



  // Fetch events for the selected month and year
  $.get('fetch_events.php', { month: month + 1, year: year }, function (data) {
        data.sort((a, b) => {
          const timeA = a.event_time;
          const timeB = b.event_time;
          return timeA.localeCompare(timeB); 
      });
      data.forEach(event => {
        //manually dice data up
          const [eventY, eventM, eventD] = event.event_date.split('-').map(Number);

          //check year and month, if so append at day
          if(eventY == year && eventM == month + 1) {
            const $event = $(`#day${eventD} .events`).append(`
                <div class="event" data-id="${event.id}" data-title="${event.title}" data-desc="${event.description}" data-time="${event.event_time}" data-added_by="${event.added_by}">
                    ${event.title}
                </div>
            `).find('.event');


            $event.on('click', function (e) {
                e.stopPropagation(); // prevent add event from showing
            
                const $this = $(this);
                const eventData = {
                    title: $this.data('title'),
                    time: $this.data('time'),
                    added_by: $this.data('added_by'),
                    description: $this.data('desc'),
                };
                
                //generate details for the events, click to show the details
                $('#detailTitle').text(eventData.title);
                $('#eventTime').text(twelvehourconversion(eventData.time));
                $('#eventCreator').text(eventData.added_by);
                $('#eventDescription').text(eventData.description);
                $('#event-details').data('eventId', $this.data('id'));
                $('#event-details').fadeIn(200);
            });
          }
      });
  });

/*Function to delete events using button generated by evetn modal, if clicked remove date by calling delete_event.php */
$('#delete').on('click', function () {
  const eventId = $('#event-details').data('eventId');
  if (!eventId) return;

  if (confirm('Are you sure you want to delete this event?')) {
      $.post('delete_event.php', { id: eventId }, function (response) {
          if (response.success) {
              $('.event[data-id="' + eventId + '"]').fadeOut(300, function() {
                  $(this).remove();
              });
              $('#event-details').fadeOut(200);
          } else {
              alert('Failed to delete event.');
          }
      }, 'json');
  }
});


//this is the add event modal, when a user clicks on a date, prefills some data, asks for user input on others
  $('.calendar-day').off('click').on('click', function () {
    const day = $(this).data('day');
    const month = $('#month').val();
    const year = $('#year').val();
    const dateStr = `${year}-${String(Number(month) + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
  
    // Pre-fill the form inside the modal
    $('#event_date').val(dateStr);
    $('#event_title').val('');
    $('#event_desc').val('');
    $('#event_time').val('');
    $('#event_att').val(username);
  
    // Show the modal
    $('#eventtoggle').fadeIn();
  });

//share event toggle generates list of members
  document.getElementById('share').addEventListener('change', function() {
    var familySelect = document.getElementById('family_members_select');
    
    // Toggle the display of the family member selection based on the checkbox
    if (this.checked) {
        familySelect.style.display = 'block';
        getFamilyMembers();  // Load family members dynamically from the server
    } else {
        familySelect.style.display = 'none';
    }
});

  /*These are all close functions, basically click outside or the x to close any forms that appear*/
  $('.close').on('click', function () {
    $('#eventtoggle').fadeOut();
  });

  $(window).on('click', function (event) {
    if ($(event.target).is('#eventtoggle')) {
      $('#eventtoggle').fadeOut();
    }
  });

  $('.detailsclose').on('click', function () {
    $('#event-details').fadeOut(200);
});
$(window).on('click', function (event) {
    if ($(event.target).is('#event-details')) {
      $('#event-details').fadeOut();
    }
  });
}

/*This is a function to convert from 24hr format to 12 */
function twelvehourconversion(time) {
    const [hour, minute] = time.split(':');
    let hours = parseInt(hour);
    const timeofday = hours >= 12 ? 'PM' : 'AM';

    hours = hours % 12;
    hours = hours ? hours : 12;

    return `${hours}:${minute} ${timeofday}`;
}
//function to return users in your family
function getFamilyMembers() {
  $.getJSON('get_family.php', function(data) {
    var family = document.getElementById('family_members');
    family.innerHTML = '';
    data.forEach(function(member){
      var temp = document.createElement('option');
      temp.value = member.id;
      temp.textContent = 'User ID: ' + member.user_id;
      family.appendChild(temp);
    }); 
  });
}